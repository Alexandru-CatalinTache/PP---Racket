#lang racket                                                       ;ETAPA 1
(require racket/match)

(provide (all-defined-out))

(define ITEMS 5)

;; C1, C2, C3, C4 sunt case într-un supermarket.
;; C1 acceptă doar clienți care au cumparat maxim ITEMS produse (ITEMS este definit mai sus).
;; C2 - C4 nu au restricții.
;; Considerăm că procesarea fiecărui produs la casă durează un minut.
;; Casele pot suferi întarzieri (delay).
;; La un moment dat, la fiecare casă există 0 sau mai mulți clienți care stau la coadă.
;; Timpul total (tt) al unei case reprezintă timpul de procesare al celor aflați la coadă,
;; adică numărul de produse cumpărate de ei + întârzierile suferite de casa respectivă (dacă există).
;; Ex:
;; la C3 sunt Ana cu 3 produse și Geo cu 7 produse,
;; și C3 nu are întârzieri => tt pentru C3 este 10.


; Definim o structură care descrie o casă prin:
; - index (de la 1 la 4)
; - tt (timpul total descris mai sus)
; - queue (coada cu persoanele care așteaptă)
(define-struct counter (index tt queue) #:transparent)


; TODO
; Implementați o functie care intoarce o structură counter goală.
; tt este 0 si coada este vidă.
; Obs: la definirea structurii counter se creează automat o funcție make-counter pentru a construi date de acest tip
(define (empty-counter index)
  empty-counter (make-counter index 0 '()))


; TODO
; Implementați o funcție care crește tt-ul unei case cu un număr dat de minute.
(define (tt+ C minutes)
  (match C
    [(counter index tt queue)
     C (struct-copy counter C [tt (+ (counter-tt C) minutes)])]))

; TODO
; Implementați o funcție care primește o listă de case și intoarce o pereche dintre:
; - indexul casei (din listă) care are cel mai mic tt
; - tt-ul acesteia
; Obs: când mai multe case au același tt, este preferată casa cu indexul cel mai mic

(define (minim-lista L elem-min)  ; functie ce intoarce tt ul minim al unei liste de counters
  (cond ((null? L) elem-min)
        ((< (counter-tt (car L)) elem-min) (minim-lista (cdr L) (counter-tt (car L))))
        (else (minim-lista (cdr L) elem-min))))

(define (min-tt counters)
  (newmin-tt (minim-lista (cdr counters) (counter-tt (car counters ))) counters))



(define (newmin-tt tt counters)     ; returnare pereche (index tt)
  (if(equal? (counter-tt (car counters)) tt)  (cons (counter-index (car counters)) tt)
     (newmin-tt tt (cdr counters))))


;(min-tt (list (counter 1 1 '())  (counter 2 32 '())  (counter 4 1 '()))) ;testare min-tt

; TODO
; Implementați o funcție care adaugă o persoană la o casă.
; C = casa, name = numele persoanei, n-items = numărul de produse cumpărate
; Veți întoarce o nouă structură obținută prin așezarea perechii (name . n-items)
; la sfârșitul cozii de așteptare.
(define (add-to-counter C name n-items)
  C (struct-copy counter C [tt (+ (counter-tt C) n-items)] [queue (append (counter-queue C) (list(cons name n-items)))] ))



; TODO
; Implementați funcția care simulează fluxul clienților pe la case.
; requests = listă de cereri care pot fi de 2 tipuri:
; - (<name> <n-items>) - persoana <name> trebuie așezată la coadă la o casă
; - (delay <index> <minutes>) - casa <index> este întârziată cu <minutes> minute
; C1, C2, C3, C4 = structuri corespunzătoare celor 4 case
; Sistemul trebuie să proceseze aceste cereri în ordine, astfel:
; - persoanele vor fi distribuite la casele cu tt minim (dintre casele la care au voie)
; - când o casă suferă o întârziere, tt-ul ei crește
(define (serve requests C1 C2 C3 C4)
  
  ; puteți să vă definiți aici funcții ajutătoare (define în define)
  ; - avantaj: aveți acces la variabilele requests, C1, C2, C3, C4 fără a le retrimite ca parametri
  ; puteți de asemenea să vă definiți funcțiile ajutătoare în exteriorul lui "serve"
  ; - avantaj: puteți să vă testați fiecare funcție imediat ce ați implementat-o
  
   (if (null? requests)
      (list C1 C2 C3 C4)
      (match (car requests)
        [(list 'delay index minutes)   (recursive1 requests index minutes C1 C2 C3 C4 (list C1 C2 C3 C4))]
        [(list name n-items)      (recursive2 requests name n-items (find_best_index n-items (list C1 C2 C3 C4) C2 C3 C4) C1 C2 C3 C4)]))) 
  

(define (find_counter_by_index index L)    ; returneaza casa ce are indexul respectiv
  (if(equal? index (counter-index (car L))) (car L)
     (find_counter_by_index index (cdr L))))

(define (function_delay index minutes L )           ; returneaza valoarea noului tt, dupa intarziere
  (tt+ (find_counter_by_index index L) minutes))

(define (recursive1 requests index minutes C1 C2 C3 C4 list) ;apeleaza functia initiala cu parametrii requests casa al carei tt s-a modificat si celelalte case
  (cond [(equal? index 1) (serve (cdr requests) (function_delay index minutes list) C2 C3 C4)]
        [(equal? index 2) (serve (cdr requests) C1 (function_delay index minutes list) C3 C4)]
        [(equal? index 3) (serve (cdr requests) C1 C2 (function_delay index minutes list) C4)]
        [(equal? index 4) (serve (cdr requests) C1 C2 C3 (function_delay index minutes list))]))


(define (recursive2 requests name n-items index C1 C2 C3 C4)
    (cond [(equal? index 1) (serve (cdr requests) (add-customer name n-items (list C1 C2 C3 C4) C1 C2 C3 C4) C2 C3 C4)]
          [(equal? index 2) (serve (cdr requests) C1 (add-customer name n-items (list C1 C2 C3 C4) C1 C2 C3 C4)  C3 C4)]
          [(equal? index 3) (serve (cdr requests) C1 C2 (add-customer name n-items (list C1 C2 C3 C4) C1 C2 C3 C4) C4)]
          [(equal? index 4) (serve (cdr requests) C1 C2 C3 (add-customer name n-items (list C1 C2 C3 C4) C1 C2 C3 C4) )]))

(define (counter_min tt counters)   ; intoarce casa cu cel mai mic tt
  (if(equal? (counter-tt (car counters)) tt) (car counters)
     (counter_min tt (cdr counters))))


(define (find_best_index n-items L C2 C3 C4)    ; gaseste indexul al carei case ii adaug clientul
  (if(> n-items 5) (counter-index (counter_min (minim-lista (list C2 C3 C4) (counter-tt C2)) (list C2 C3 C4)))
                                 (counter-index (counter_min (minim-lista L (counter-tt (car L))) L))))
  
(define (add-customer name n-items L C1 C2 C3 C4) ; adauga la coada potrivita un client
  (if(> n-items 5) (add-to-counter (counter_min (minim-lista (list C2 C3 C4) (counter-tt C2)) (list C2 C3 C4)) name n-items)
     (add-to-counter (counter_min (minim-lista L (counter-tt C1)) L) name n-items)))








(define (as a b)
  (if(b > a) b a))



; verificare:
;(function_delay 4 100 (list (counter 1 1 '())  (counter 3 32 '())  (counter 4 10 '()) (counter 7 8 '())))
